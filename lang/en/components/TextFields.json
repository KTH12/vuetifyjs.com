{
  "header": "Text field",
  "headerText": "Text fields components are used for collecting user provided information.",
  "components": ["v-text-field"],
  "supplemental": ["MaskTable"],
  "examples": {
    "usage": {
      "header": "Standard text-field",
      "desc": "A simple text-field with placeholder and/or label."
    },
    "singleLine": {
      "header": "Single line",
      "desc": "Single line text-fields do not float their label on focus or with data."
    },
    "icon": {
      "header": "Icons",
      "desc": "You can add icons to the text field with `prepend-icon`, `append-icon` and `append-outer-icon` props. With `prepend-icon-cb` and `append-icon-cb` you can trigger a callback function when click the icon. If `clearable`, you can customize the clear icon with `clear-icon` and overwrite its behavior with `clear-icon-cb`."
    },
    "characterCounter": {
      "header": "Character counter",
      "desc": "Use a `counter` prop to inform a user of the character limit. The counter does not perform any validation by itself. You will need to pair it with either the internal validation system, or a 3rd party library. You can use it on regular, box or outline text fields."
    },
    "password": {
      "header": "Password input",
      "desc": "A password input can be used with an appended icon and callback to control the visibility."
    },
    "validation": {
      "header": "Validation",
      "desc": "Vuetify includes simple validation through the `rules` prop. The prop accepts an array of callbacks. While validating rules, the current v-model value will be passed to the callback. This callback should return either `true` or a `String`, the error message."
    },
    "fullWidthWithCharacterCounter": {
      "header": "Full-width text field with character counter",
      "desc": "Full width text fields allow you to create boundless inputs. In this example, we use a `v-divider` to separate the fields."
    },
    "hint": {
      "header": "Hint text",
      "desc": "The **hint** property on text-fields adds the provided string beneath the text-field. Using **persistent-hint** keeps the hint visible when the text-field is not focused."
    },
    "prefixesAndSuffixes": {
      "header": "Prefixes & suffixes",
      "desc": "The **prefix** and **suffix** property allows you to prepend and append inline non-modifiable text next to the text-field"
    },
    "customValidation": {
      "header": "Custom validation",
      "desc": "While the built in `v-form` or 3rd party plugin such as [vuelidate](https://github.com/monterail/vuelidate) or [vee-validation](https://github.com/logaretm/vee-validate) can help streamline your validation process, you can choose to simply control it yourself."
    },
    "box": {
      "header": "Box style",
      "desc": "Text-fields can be used with an alternative box design. Append and prepend icon props are **not** supported in this mode."
    },
    "solo": {
      "header": "Solo style",
      "desc": "Text-fields can be used with an alternative solo design."
    },
    "customColors": {
      "header": "Custom colors",
      "desc": "You can optionally change a text-field into any color in the Material design palette. Below is an example implementation of a custom form with validation."
    },
    "masks": {
      "header": "Masks",
      "desc": "Text fields can validate against character masks. Using either a pre-made or custom rules, you can optionally format and validate specific character sets."
    },
    "progressBar": {
      "header": "Progress bar",
      "desc": "You can display a progress bar instead of the bottom line. You can use the default indeterminate progress having same color as the text field or designate a custom one using the `progress` slot"
    }
  },
  "props": {
    "autoGrow": "Auto-grows the input. This option requires the use of **v-model**",
    "autofocus": "Enable autofocus",
    "box": "Applies the alternate box input style",
    "counter": "Creates counter for input length. If no Number is specified, it defaults to 25. Does not apply any validation.",
    "fullWidth": "Desginates input type as full-width",
    "multiLine": "Turns into textarea",
    "noResize": "Remove resize handle, only applies to **multi-line** and **textarea** props",
    "prefix": "Displays prefix text",
    "rows": "Number of rows in textarea",
    "rowHeight": "Designate a custom _row-height_. Used for determining input height when using **multi-line** or **textarea** props",
    "suffix": "Displays suffix text",
    "textarea": "Textarea text-field with alternate style",
    "toggleKeys": "Array of key codes that will toggle the input (if it supports toggling)",
    "type": "Sets input type"
  },
  "events": {
    "change": "Mixins.Input.events.change",
    "update:error": "Mixins.Input.events.update:error"
  }
}
